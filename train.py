import pandas as pd
import random
import re
import logging
import numpy
from gensim.models import ldamodel
from gensim.corpora.dictionary import Dictionary

# The files (lda_tensor.tsv and lda_metadata.tsv) generated by this script can directly be uploaded to http://projector.tensorflow.org/ for visualization.

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# setting random seed to get the same results each time.
numpy.random.seed(1)

# read data
dataframe = pd.read_csv('movie_plots.csv')

# Convert data to required input format by LDA
texts = []
for line in dataframe.Plots:
    lowered = line.lower()
    words = re.findall(r'\w+', lowered, flags = re.UNICODE | re.LOCALE)
    texts.append(words)
dictionary = Dictionary(texts)
# Filter out words that occur less than 0 documents, or more than 30% of the documents.
dictionary.filter_extremes(no_below=0, no_above=0.3)
corpus = [dictionary.doc2bow(text) for text in texts]

# Set training parameters.
num_topics = 6
chunksize = 2000
passes = 50
iterations = 100
eval_every = None

# train model
model = ldamodel.LdaModel(corpus=corpus, id2word=dictionary, chunksize=chunksize, alpha='auto', eta='auto', iterations=iterations, num_topics=num_topics, passes=passes, eval_every=eval_every)

# Get document topics
doc_topics = model.get_document_topics(corpus, minimum_probability=0)

tensors = []
# create file for tensors
with open('doc_lda_tensor.tsv','w') as w:
    for doc_topic in doc_topics:
        doc_tensor = []
        for topic in doc_topic:
            doc_tensor.append((topic[0], float(round(topic[1], 3))))
            w.write(str(topic[1])+ "\t")
        w.write("\n")
        # sort topics according to highest probabilities
        doc_tensor = sorted(doc_tensor, key=lambda x: x[1], reverse=True)
        # store vectors to add in metadata file
        tensors.append(doc_tensor[:6])


# create file for metadata
i=0
with open('doc_lda_metadata.tsv','w') as w:
    w.write('Titles\tGenres\n')
    for j,k in zip(dataframe.Titles, dataframe.Genres):
        w.write("%s\t%s\n" % (''.join((str(j), str(tensors[i]))),k))
        i+=1


